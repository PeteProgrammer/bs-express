// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Express = require("express");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

var $$Error = /* module */[];

function method_(req) {
  var s = req.method;
  switch (s) {
    case "CONNECT" : 
        return /* Connect */7;
    case "DELETE" : 
        return /* Delete */3;
    case "GET" : 
        return /* Get */0;
    case "HEAD" : 
        return /* Head */4;
    case "OPTIONS" : 
        return /* Options */5;
    case "POST" : 
        return /* Post */1;
    case "PUT" : 
        return /* Put */2;
    case "TRACE" : 
        return /* Trace */6;
    default:
      return Pervasives.failwith("Express.Request.method_ Unexpected method: " + s);
  }
}

function protocol(req) {
  var s = req.protocol;
  switch (s) {
    case "http" : 
        return /* Http */0;
    case "https" : 
        return /* Https */1;
    default:
      return Pervasives.failwith("Express.Request.protocol, Unexpected protocol: " + s);
  }
}

function accepts(req, types) {
  var ret = req.accepts(types);
  var tagged_t = Js_json.classify(ret);
  if (typeof tagged_t === "number" || tagged_t.tag) {
    return undefined;
  } else {
    return tagged_t[0];
  }
}

function acceptsCharsets(req, types) {
  var ret = req.acceptsCharsets(types);
  var tagged_t = Js_json.classify(ret);
  if (typeof tagged_t === "number" || tagged_t.tag) {
    return undefined;
  } else {
    return tagged_t[0];
  }
}

var $$Request = /* module */[
  /* method_ */method_,
  /* protocol */protocol,
  /* accepts */accepts,
  /* acceptsCharsets */acceptsCharsets
];

var $$Response = /* module */[];

function error(e) {
  return e;
}

var Next = /* module */[
  /* middleware */undefined,
  /* route */"route",
  /* error */error
];

var Middleware = /* module */[];

function MakeBindFunctions(T) {
  return /* module */[];
}

function listen(app, $staropt$star, $staropt$star$1, param) {
  var port = $staropt$star !== undefined ? $staropt$star : 3000;
  var onListen = $staropt$star$1 !== undefined ? $staropt$star$1 : (function (param) {
        return /* () */0;
      });
  app.listen(port, Curry.__1(onListen));
  return /* () */0;
}

var App = /* module */[/* listen */listen];

function express(prim) {
  return Express();
}

function defaultOptions(param) {
  return { };
}

var Static = /* module */[/* defaultOptions */defaultOptions];

exports.$$Error = $$Error;
exports.$$Request = $$Request;
exports.$$Response = $$Response;
exports.Next = Next;
exports.Middleware = Middleware;
exports.MakeBindFunctions = MakeBindFunctions;
exports.App = App;
exports.express = express;
exports.Static = Static;
/* express Not a pure module */
